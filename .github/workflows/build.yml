name: Build
on: [push, pull_request]
jobs:

  Test-Scripts:
    runs-on: windows-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Test scripts
        shell: pwsh
        run: |
          $pesterConfig = @{
            Run = @{
              Path = ".\tests\common.Tests.ps1"
              Exit = $true
            }
            TestResult = @{
              Enabled = $true
              OutputPath = "testResults.xml"
              OutputFormat = "NUnitXML"
            }
            Output = @{
              Verbosity = "Detailed"
            }
          }
          Invoke-Pester -Configuration $pesterConfig

      - name: Upload test results
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: Pester-Test-Results
          path: testResults.xml

  Build:
    runs-on: windows-latest
    needs: Test-Scripts
    strategy:
      matrix:
        bitness: ['x86', 'x64']
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build ${{ matrix.bitness }}
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'
          $ProgressPreference = 'SilentlyContinue'

          .\build.ps1 .\${{ matrix.bitness }}.json -MSYS2Path C:\msys64

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Package-${{ matrix.bitness }}
          path: bin/

  Test-Installer:
    runs-on: windows-${{ matrix.winver }}
    needs: Build
    strategy:
      fail-fast: false
      matrix:
        bitness: ['x86', 'x64']
        winver: ['2019', '2022']
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Download installer artifact
        uses: actions/download-artifact@v2
        with:
          name: Package-${{ matrix.bitness }}
          path: bin

      - name: Test installer
        shell: pwsh
        run: docker run --rm -v "$(Get-Location):C:\repo" mcr.microsoft.com/windows/servercore:ltsc${{ matrix.winver }}
          powershell -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command "cd C:\repo; .\tests\setup.ps1"

      - name: Upload installer logs
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: Installer-Logs-Windows-${{ matrix.winver }}-${{ matrix.bitness }}
          path: logs/

  Test-Installer-ExistingVS:
    runs-on: windows-2019
    needs: Build
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Download installer artifact
        uses: actions/download-artifact@v2
        with:
          name: Package-x64
          path: bin

      - name: Test installer
        shell: pwsh
        run: docker run --rm -v "$(Get-Location):C:\repo" mcr.microsoft.com/windows/servercore:ltsc2019
          powershell -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command "cd C:\repo; .\tests\setup-oldvs.ps1; .\tests\setup.ps1"

      - name: Upload installer logs
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: Installer-Logs-Windows-2019-x64-ExistingVS
          path: logs/
